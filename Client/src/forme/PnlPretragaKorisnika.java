package forme;

import domen.Korisnik;
import forme.model.KorisnikTableModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableColumn;
import komunikacija.Komunikacija;
import transfer.TransferObjekatOdgovor;
import transfer.TransferObjekatZahtev;
import util.Konstante;
import util.Util;

public class PnlPretragaKorisnika extends javax.swing.JPanel {

    /**
     * Creates new form PnlPretragaKorisnika
     */
    public PnlPretragaKorisnika() {
        initComponents();
        srediFormu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtPretragaKorisnika = new javax.swing.JTextField();
        jbtnPretragaKorisnika = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblPretragaKorisnika = new javax.swing.JTable();
        jbtnDetalji = new javax.swing.JButton();
        jbtnObrisiKorisnika = new javax.swing.JButton();
        jbtnPonistiPretragu = new javax.swing.JButton();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jLabel1.setText("Unesite kriterijum pretrage: (naziv firme/kontakt osoba)");

        jbtnPretragaKorisnika.setText("Pretraži");
        jbtnPretragaKorisnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPretragaKorisnikaActionPerformed(evt);
            }
        });

        jtblPretragaKorisnika.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblPretragaKorisnika);

        jbtnDetalji.setText("Detalji");
        jbtnDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDetaljiActionPerformed(evt);
            }
        });

        jbtnObrisiKorisnika.setText("Obriši korisnika");
        jbtnObrisiKorisnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiKorisnikaActionPerformed(evt);
            }
        });

        jbtnPonistiPretragu.setText("Poništi pretragu");
        jbtnPonistiPretragu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPonistiPretraguActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnPretragaKorisnika)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnPonistiPretragu))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtnDetalji)
                            .addComponent(jbtnObrisiKorisnika)))
                    .addComponent(jtxtPretragaKorisnika, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtPretragaKorisnika, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnPretragaKorisnika)
                    .addComponent(jbtnPonistiPretragu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnDetalji)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnObrisiKorisnika))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnPretragaKorisnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPretragaKorisnikaActionPerformed
        try {
            if (!izvrsiValidaciju()) {
                return;
            }

            String kriterijumPretrage = jtxtPretragaKorisnika.getText();

            TransferObjekatZahtev toz = new TransferObjekatZahtev();
            toz.setOperacija(Konstante.PRETRAZI_KORISNIKE);
            toz.setParametar(kriterijumPretrage);
            Komunikacija.getInstance().posaljiZahtev(toz);
            TransferObjekatOdgovor too = Komunikacija.getInstance().primiOdgovor();
            List<Korisnik> lista = (List<Korisnik>) too.getRezultat();
            if (lista.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe korisnike po zadatoj vrednosti.", "Sistemska poruka", JOptionPane.ERROR_MESSAGE);
            } else {
                KorisnikTableModel model = new KorisnikTableModel(lista);
                jtblPretragaKorisnika.setModel(model);

                JOptionPane.showMessageDialog(this, "Sistem je našao korisnike po zadatoj vrednosti.", "Sistemska poruka", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception ex) {

        }
    }//GEN-LAST:event_jbtnPretragaKorisnikaActionPerformed

    private void jbtnDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDetaljiActionPerformed
        try {
            int red = jtblPretragaKorisnika.getSelectedRow();
            if (red == -1) {
                JOptionPane.showMessageDialog(this, "Niste odabrali korisnika!", "Sistemska poruka", JOptionPane.WARNING_MESSAGE);
            }
            KorisnikTableModel model = (KorisnikTableModel) jtblPretragaKorisnika.getModel();
            Korisnik k = model.vratiKorisnika(red);
            Util.getInstance().putKorisnik("izabrani_korisnik", k);

            JTabbedPane tabbedPane = new JTabbedPane();
            PnlUnosKorisnika panelUnos = new PnlUnosKorisnika();
            PnlPrikazZaduzenja panelPrikaz = new PnlPrikazZaduzenja(k);
            tabbedPane.addTab("Podaci o korisniku", panelUnos);
            tabbedPane.addTab("Podaci o zaduženjima", panelPrikaz);

            JDialog d1 = (JDialog) SwingUtilities.getWindowAncestor(this);
            JFrame f = (JFrame) SwingUtilities.getWindowAncestor(d1);
            JDialog d = new JDialog(f, "Rad sa korisnikom: " + k.getNaziv(), true);
            d.setLayout(new BorderLayout());
            d.add(tabbedPane, BorderLayout.CENTER);
            d.pack();
            d.setLocationRelativeTo(this);
            d.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da nađe podatke o izabranom korisniku.", "Sistemska poruka", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnDetaljiActionPerformed

    private void jbtnObrisiKorisnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnObrisiKorisnikaActionPerformed
        try {
            int red = jtblPretragaKorisnika.getSelectedRow();
            if (red == -1) {
                JOptionPane.showMessageDialog(this, "Niste odabrali korisnika!", "Sistemska poruka", JOptionPane.WARNING_MESSAGE);
            }

            KorisnikTableModel model = (KorisnikTableModel) jtblPretragaKorisnika.getModel();
            Korisnik k = model.vratiKorisnika(red);

            TransferObjekatZahtev toz = new TransferObjekatZahtev();
            toz.setOperacija(Konstante.OBRISI_KORISNIKA);
            toz.setParametar(k);
            Komunikacija.getInstance().posaljiZahtev(toz);
            TransferObjekatOdgovor too = Komunikacija.getInstance().primiOdgovor();
            model.obrisiRed(red);
            JOptionPane.showMessageDialog(this, "Sistem je obrisao korisnika", "Sistemska poruka", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da obriše korisnika", "Sistemska poruka", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnObrisiKorisnikaActionPerformed

    private void jbtnPonistiPretraguActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPonistiPretraguActionPerformed
        srediFormu();
    }//GEN-LAST:event_jbtnPonistiPretraguActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        
    }//GEN-LAST:event_formFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDetalji;
    private javax.swing.JButton jbtnObrisiKorisnika;
    private javax.swing.JButton jbtnPonistiPretragu;
    private javax.swing.JButton jbtnPretragaKorisnika;
    private javax.swing.JTable jtblPretragaKorisnika;
    private javax.swing.JTextField jtxtPretragaKorisnika;
    // End of variables declaration//GEN-END:variables

    private void srediFormu() {
        try {
            TransferObjekatZahtev toz = new TransferObjekatZahtev();
            toz.setOperacija(Konstante.VRATI_KORISNIKE);
            Komunikacija.getInstance().posaljiZahtev(toz);
            TransferObjekatOdgovor too = Komunikacija.getInstance().primiOdgovor();
            List<Korisnik> lista = (List<Korisnik>) too.getRezultat();
            KorisnikTableModel model = new KorisnikTableModel(lista);
            jtblPretragaKorisnika.setModel(model);

            TableColumn tc0 = jtblPretragaKorisnika.getColumnModel().getColumn(0);
            tc0.setPreferredWidth(200);
            TableColumn tc1 = jtblPretragaKorisnika.getColumnModel().getColumn(1);
            tc1.setPreferredWidth(100);
            TableColumn tc2 = jtblPretragaKorisnika.getColumnModel().getColumn(2);
            tc2.setPreferredWidth(40);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita listu korisnika", "Sistemska poruka", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean izvrsiValidaciju() {
        if (jtxtPretragaKorisnika.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Niste uneli kriterijum pretrage!", "Sistemska poruka", JOptionPane.ERROR_MESSAGE);
            jtxtPretragaKorisnika.requestFocusInWindow();
            jtxtPretragaKorisnika.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            return false;
        }
        return true;
    }
}
